<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">
    <service verb="get" noun="Returns">
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="uri" default-value="returns.json"/>
            <parameter name="stateParam" default-value="REQUESTED">
                <description>
                     Pass Return Magic API the state (REQUESTED, APPROVED, RECEIVED, CONTROLLED, REFUNDED, ARCHIVED, CANCELLED) parameter to be included on the call.
                </description>
            </parameter>
            <parameter name="maxNumberOfRequest" type="Integer" default-value="100">
                <description>
                     Maximun number of request pages to look into the Return Magic API.
                </description>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="bodyText"/>
        </out-parameters>
        <actions>
            <log message="\n======= Start getting returns =======\n"/>
            <set field="prevList" from="[]"/>
            <script><![CDATA[ for (pageParam = 0; pageParam < maxNumberOfRequest; pageParam++) { ]]></script>
                <service-call name="mantle.returnmagic.ApiServices.query#ApiGetAllReturns" in-map="context" out-map="context"/>
                <script><![CDATA[
                    if (bodyText) prevList = bodyText
                    else bodyText = prevList

                    if (bodySize < 20) break
            } ]]></script>
            <!--<log message="\n======= bodyText ${bodyText} =======\n"/>-->
            <if condition="statusCode != 200">
                <return error="true" message="Error querying Return Magic API: ${bodyText}"/>
            </if>
        </actions>
    </service>
    <service verb="get" noun="ReturnDetails">
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="uri" default-value="returns.json"/>
            <parameter name="id">
                <description>
                    Pass Return Magic API the ID of the return as parameter to be included on the call.
                </description>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="bodyText"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.returnmagic.ApiServices.query#ApiGetReturnDetail" in-map="context" out-map="context"/>
            <if condition="statusCode != 200">
                <return error="true" message="Error querying Return Magic API: ${bodyText}"/>
            </if>
        </actions>
    </service>
    <service verb="get" noun="RequestedReturns">
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="apiResponses"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="remote"/>

            <if condition="!remote">
                <return error="true" message="No systemMessageRemote found for id ${systemMessageRemoteId}"/>
            </if>

            <!--  Data shared accross new returns -->
            <set field="productStore" from="remote.'mantle.product.store.ProductStore'"/>
            <if condition="!productStore">
                <return error="true" message="No product store found for remote = ${systemMessageRemoteId}"/>
            </if>

            <set field="facilityId" from="productStore.inventoryFacilityId"/>
            <set field="vendorPartyId" from="productStore.organizationPartyId"/>

            <!-- Look for all the returns approved-->
            <service-call name="mantle.returnmagic.ReturnMagicServices.get#Returns" out-map="context" in-map="context + [stateParam: 'REQUESTED']"/>

            <set field="apiResponses" from="[]"/>
            <iterate list="bodyText" entry="rawReturn">
                <if condition="!rawReturn.states">
                    <log message="*** Return Magic with ID ${rawReturn.confirmation} has no states. Skipping!!" />
                    <continue />
                </if>

                <service-call name="mantle.returnmagic.ApiServices.query#ApiGetReturnDetail" in-map="[systemMessageRemoteId: systemMessageRemoteId, id: rawReturn.id]" out-map="returnDetail" out-map-add-to-existing="false"/>

                <script>apiResponses.add(rawReturn + returnDetail.bodyText + [productStoreId: productStore.productStoreId, facilityId: facilityId, vendorPartyId: vendorPartyId, systemMessageRemoteId: systemMessageRemoteId])</script>
            </iterate>
        </actions>
    </service>
    <service verb="put" noun="ChangeStates">
        <in-parameters>
            <parameter name="systemMessageRemoteId" required="true"/>
            <parameter name="uri" default-value="returns.json"/>
            <parameter name="id" required="true">
                <description>
                    Pass Return Magic API the ID of the return as parameter to be included on the call.
                </description>
            </parameter>
            <parameter name="newState" required="true">
                <description>
                    Pass Return Magic API the state (REQUESTED, APPROVED, RECEIVED, CONTROLLED, REFUNDED, ARCHIVED, CANCELLED) parameter to be included on the call in order to change the state.
                </description>
            </parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="bodyText"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.returnmagic.ApiServices.put#ApiChangeReturnState" in-map="context" out-map="context"/>
            <if condition="statusCode != 200">
                <return error="true" message="Error querying Return Magic API: ${bodyText}"/>
            </if>
        </actions>
    </service>
    <service verb="save" noun="NewReturn">
        <description>
            Takes a Map build from the return magic json, runs some basic validations on moqui and, if they succeed,
            creates an approves a new return. This service might error out due to several conditions (incomplete info, item returnQuantity, etc),
            so it is adviced to use a safe block when calling it inside a loop.
        </description>
        <in-parameters>
            <auto-parameters entity-name="mantle.order.return.ReturnHeader" include="nonpk">
                <exclude field-name="visitId"/>
            </auto-parameters>
            <parameter name="customerAddress" type="Map" required="true"/>
            <parameter name="items" type="List" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="returnId"/>
        </out-parameters>
        <actions>
            <if condition="!displayId || !customerPartyId">
                <return error="true" message="Incomplete return basic data"/>
            </if>

            <if condition="!customerAddress.city || !customerAddress.countryGeoId || !customerAddress.address1">
                <return error="true" message="Incomplete address ${customerAddress} data for return"/>
            </if>

            <!-- We search for a postal address for the customer of the return. If we don't find
                a match, we will create a new one -->
            <entity-find entity-name="mantle.party.contact.PartyContactMechPostalAddress" list="existingList">
                <econdition field-name="partyId" from="customerPartyId"/>
                <econdition field-name="city" from="customerAddress.city"/>
                <econdition field-name="address1" from="customerAddress.address1"/>
                <econdition field-name="countryGeoId" from="customerAddress.countryGeoId"/>
                <econdition field-name="postalCode" from="customerAddress.postalCode" ignore-if-empty="true"/>
                <econdition field-name="stateProvinceGeoId" from="customerAddress.stateProvinceGeoId" ignore-if-empty="true"/>
            </entity-find>

            <if condition="existingList">
                <then>
                    <set field="postalContactMechId" from="existingList[0].contactMechId"/>
                </then>
                <else>
                    <service-call name="mantle.party.ContactServices.create#PostalAddress" out-map="newAddress"
                        in-map="customerAddress + [partyId: customerPartyId, contactMechPurposeId: 'PostalPurchReturn']"/>

                    <set field="postalContactMechId" from="newAddress.contactMechId"/>
                </else>
            </if>

            <service-call name="mantle.order.ReturnServices.create#Return" in-map="context" out-map="context"/>

            <set field="itemsToReturn" from="[]"/>

            <!-- We need to calculate what other items need to be added to the return (tax, discount, etc.) -->
            <iterate list="items" entry="returnProduct">
                <if condition="returnProduct.totalRefundAmount">
                    <service-call name="mantle.returnmagic.ApiServices.query#ApiGetReturnDetail" in-map="returnProduct" out-map="extraItems"/>

                    <set field="returnProduct.responseAmount" from="extraItems.responseAmount"/>
                    <if condition="extraItems.itemChildren">
                        <script>itemsToReturn.addAll(extraItems.itemChildren)</script>
                    </if>
                </if>

                <script>itemsToReturn.add(returnProduct)</script>
            </iterate>

            <iterate list="itemsToReturn" entry="returnItem">
                <!-- Some items from return magic might not be valid in moqui (displayId not found, order not found, product not in order) -->
                <service-call name="mantle.order.ReturnServices.add#OrderItemToReturn" in-map="returnItem + [returnId: returnId]"
                    out-map="newReturnItem"/>

                <!-- OrderItemToReturn skips responseAmount as parameter, so we need to manually update it -->
                <if condition="returnItem.responseAmount">
                    <service-call name="update#mantle.order.return.ReturnItem"
                        in-map="[returnId: returnId, returnItemSeqId: newReturnItem.returnItemSeqId, responseAmount: returnItem.responseAmount]"/>
                </if>
            </iterate>

            <service-call name="mantle.order.ReturnServices.approve#Return" in-map="[returnId: returnId]"/>
        </actions>
    </service>
    <service verb="test" noun="ReturnMagic">
        <description>This service is only created for test propose, to test the import without importing</description>
        <in-parameters>
            <parameter name="systemMessageRemoteId" default-value="SpyReturnMagicRemote" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="returnIdList"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.returnmagic.ReturnMagicServices.get#RequestedReturns" in-map="context"
                out-map="context"/>

            <set field="returnIdList" from="[]"/>
            
            <iterate list="apiResponses" entry="apiResponse">
                <service-call name="mantle.returnmagic.ApiServices.map#JsonReturns" in-map="apiResponse" out-map="moquiReturn" out-map-add-to-existing="false"/>
                <log message="\nThe moquiReturn is ${moquiReturn}\n"/>

                <if condition="!moquiReturn.customerPartyId">
                    <log message="\nThe return with displayId ${moquiReturn.displayId} doesn't have a valid customer ${moquiReturn.customerPartyId}\n"/>
                    <continue/>
                </if>

                <set field="invalidItems" from="moquiReturn.items.findAll { !it.orderItemSeqId || !it.returnReasonEnumId }"/>

                <if condition="invalidItems">
                    <log message="\nThe return with displayId ${moquiReturn.displayId} has the following invalid items:\n${groovy.json.JsonOutput.toJson(invalidItems)}\n"/>
                    <continue/>
                </if>

                <entity-find-count entity-name="mantle.order.return.ReturnHeader" count-field="existingReturns">
                    <econdition field-name="displayId" from="moquiReturn.displayId"/>
                    <econdition field-name="facilityId" from="moquiReturn.facilityId"/>
                    <econdition field-name="vendorPartyId" from="moquiReturn.vendorPartyId"/>
                    <econdition field-name="statusId" operator="not-equals" value="ReturnCancelled"/>
                </entity-find-count>

                <if condition="existingReturns &gt; 0">
                    <log message="\nA return with displayId ${moquiReturn.displayId} and vendor ${moquiReturn.vendorPartyId} already exists\n"/>
                    <continue/>
                </if>

                <script>returnIdList.add(moquiReturn.displayId + " - " + moquiReturn.vendorPartyId)</script>
            </iterate>
        </actions>
    </service>
    <service verb="import" noun="ReturnMagicReturns" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="systemMessageRemoteId" default-value="SpyReturnMagicRemote" required="true"/>
            <parameter name="systemMessageTypeId" default-value="ReturnMagicDataImport"/>
            <parameter name="internalEnumId" default-value="ObjReturn">
                <description>Used when generating the IntegrationSystemMessage</description>
            </parameter>
            <parameter name="allowReimport" type="Boolean" default-value="false"/>
        </in-parameters>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessageRemote" value-field="remote"/>

            <if condition="!remote">
                <return error="true" message="No systemMessageRemote found with id ${systemMessageRemoteId}"/>
            </if>

            <if condition="!remote.receiveUrl || !remote.password">
                <return error="true" message="SystemMessageRemote ${systemMessageRemoteId} is missing api endpoint and/or key configurations" />
            </if>

            <service-call name="create#brandedonline.integration.IntegrationExternalMessageLog" transaction="force-new"
                out-map="messageLog" in-map="[serviceName: 'mantle.returnmagic.ReturnMagicServices.import#ReturnMagicReturns',
                    statusId: 'IntegrationPreparing', internalEnumId: internalEnumId, directionEnumId: 'IntDirInbound', integrationCategoryEnumId: 'IntCatReturn', processedDate: ec.user.nowTimestamp, serviceParameters: groovy.json.JsonOutput.toJson([systemMessageRemoteId: systemMessageRemoteId, allowReimport: allowReimport])]"/>

            <set field="logData" from="[integrationExternalMessageLogId: messageLog.integrationExternalMessageLogId]"/>

            <!-- Run the whole service on a safe block in order to update IntegrationExternalMessageLog in case of error -->
            <script>try {</script>

            <service-call name="mantle.returnmagic.ReturnMagicServices.get#RequestedReturns" out-map="context"
                in-map="[systemMessageRemoteId: systemMessageRemoteId]"/>

            <service-call name="update#brandedonline.integration.IntegrationExternalMessageLog" transaction="force-new"
                in-map="logData + [statusId: 'IntegrationReceived', response: apiResponses]"/>

            <iterate list="apiResponses" entry="apiResponse">
                <set field="messageId" from="apiResponse.order.number"/>
                <set field="remoteMessageId" from="apiResponse.confirmation"/>
                <set field="allowError" from="false"/>
                <set field="messageText" from="groovy.json.JsonOutput.toJson(apiResponse)"/>

                <!-- Look for an already imported return. Each return should only be imported once -->
                <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="importedReturn">
                    <field-map field-name="messageId"/><field-map field-name="remoteMessageId"/>
                    <field-map field-name="systemMessageRemoteId"/>
                    <field-map field-name="systemMessageTypeId"/>
                </entity-find-one>
                <if condition="importedReturn">
                    <then>
                        <!-- If we don't want to reimport or the systemMessage is already consumed we skip -->
                        <if condition="!allowReimport || !(importedReturn.statusId in ['SmsgReceived', 'SmsgError'])">
                            <continue />
                        </if>

                        <set field="systemMessageId" from="importedReturn.systemMessageId"/>
                        <set field="allowError" from="true"/>
                        <log message="***** Reimporting return magic ${apiResponse.confirmation} with systemMessage ${systemMessageId}"/>

                        <!-- If not using force-new transaction, we can get lock errors -->
                        <service-call name="update#moqui.service.message.SystemMessage" out-map="updatedMessage" transaction="force-new"
                            in-map="[systemMessageId: systemMessageId, messageText: messageText]"/>
                    </then>
                    <else>
                        <!-- Create a new systemMessage for the return -->
                        <service-call name="create#moqui.service.message.SystemMessage" out-map="newMessage" transaction="force-new"
                            in-map="[systemMessageRemoteId: systemMessageRemoteId, systemMessageTypeId: systemMessageTypeId,
                                messageText: messageText, messageId: messageId, remoteMessageId: remoteMessageId, isOutgoing: 'N',
                                statusId: 'SmsgReceived', initDate: ec.user.nowTimestamp, messageDate: apiResponse.entryDate]"/>

                        <set field="systemMessageId" from="newMessage.systemMessageId"/>
                    </else>
                </if>

                <service-call name="org.moqui.impl.SystemMessageServices.consume#ReceivedSystemMessage" transaction="force-new" in-map="[systemMessageId: systemMessageId, allowError: allowError]"/>
            </iterate>

            <service-call name="update#brandedonline.integration.IntegrationExternalMessageLog" transaction="force-new"
                in-map="logData + [statusId: 'IntegrationProcessed']"/>

            <script>
                } catch (Throwable t) {
                    ec.service.sync().name('update#brandedonline.integration.IntegrationExternalMessageLog')
                        .requireNewTransaction(true).parameters(logData + [errorMessage: t.toString()]).call()
                }
            </script>
        </actions>
    </service>
    <service verb="consume" noun="ReturnMessage">
        <implements service="org.moqui.impl.SystemMessageServices.consume#SystemMessage"/>
        <actions>
            <entity-find-one entity-name="moqui.service.message.SystemMessage" value-field="systemMessage"/>

            <set field="apiResponse" from="new groovy.json.JsonSlurper().parseText(systemMessage.messageText)"/>
            <log message="\nThe apiResponse is ${apiResponse}\n"/>

            <service-call name="mantle.returnmagic.ApiServices.map#JsonReturns" in-map="apiResponse" out-map="moquiReturn" out-map-add-to-existing="false"/>

            <if condition="!moquiReturn.customerPartyId">
                <return error="true" message="\nThe return with displayId ${moquiReturn.displayId} doesn't have a valid customer\n"/>
            </if>

            <!-- We filter out invalid items before saving the return -->
            <set field="invalidItems" from="moquiReturn.items.findAll { !it.orderItemSeqId || !it.returnReasonEnumId }"/>

            <if condition="invalidItems">
                <return error="true" message="\nThe return with displayId ${moquiReturn.displayId} has the following invalid items:\n${groovy.json.JsonOutput.toJson(invalidItems)}\n"/>
            </if>

            <!-- Look for an already created return. Only re import if the return is cancelled -->
            <entity-find-count entity-name="mantle.order.return.ReturnHeader" count-field="existingReturns">
                <econdition field-name="displayId" from="moquiReturn.displayId"/>
                <econdition field-name="facilityId" from="moquiReturn.facilityId"/>
                <econdition field-name="vendorPartyId" from="moquiReturn.vendorPartyId"/>
                <econdition field-name="statusId" operator="not-equals" value="ReturnCancelled"/>
            </entity-find-count>

            <if condition="existingReturns &gt; 0">
                <return error="true" message="\nA return with displayId ${moquiReturn.displayId} and vendor ${moquiReturn.vendorPartyId} already exists\n"/>
            </if>

            <service-call name="mantle.returnmagic.ReturnMagicServices.save#NewReturn" in-map="moquiReturn" out-map="newReturn" out-map-add-to-existing="false"/>

            <if condition="newReturn.returnId">
                <service-call name="update#moqui.service.message.SystemMessage" in-map="[systemMessageId: systemMessageId, returnId: newReturn.returnId]"/>
                <service-call name="mantle.returnmagic.ReturnMagicServices.put#ChangeStates" in-map="[systemMessageRemoteId: 'SpyReturnMagicRemote',id: moquiReturn.originId, newState: 'APPROVED']"
                out-map="context"/>
            </if>
        </actions>
    </service>
</services>
